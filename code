#include<iostream>
#include <string.h>
#include <random>
using namespace std;
#include "SFML/Graphics.hpp"
//#include "SFML/"

int playerHP = 100;
bool Dead = false;
bool keys[5] = { false, false, false, false, false };
enum BUTTONS { LEFT, RIGHT, UP, DOWN, SPACE }; //left is 0, right is 1, up is 2, down is 3
bool turn = true;

int pVelx = 0;
int pVely = 0;

int enemyattack;
string gamestate = "DEFAULT";
string namepass = "NOTHING";
int ticker = 0;
int menuX = 0;
int menuY = 0;
bool scroll = false;
bool dummyfight = false;
class enemy {
private:
    int health ;
    int defense ;
    int damage ;
    int debuff ;
    int moves ;
    int xpos ;
    bool isDead ;

public:
    enemy(); //default constructor: initalizes all the variables
    enemy(string type, int hpass, int position, int damagepass, int defensepass); //parameterized constructor
    int attack(int damagetaken, int attacknum);
    void loot();
    void draw(int position);
    int getHealth() { return health; }
};//---------------------------------------------------------

sf::Font font;
sf::Text enemyNametext;
sf::Text enemyHPtext;
int main() {

    //game set up 
    sf::RenderWindow screen(sf::VideoMode(800, 800), "Final?"); //set up screen
    sf::Event event; //set up event queue
    sf::Clock clock; //set up the clock (needed for game timing)
    const float FPS = 60.0f; //FPS
    screen.setFramerateLimit(FPS); //set FPS

    sf::Texture sky;
    sky.loadFromFile("blue.png");
    sf::Sprite blue;
    blue.setTexture(sky);

    sf::Texture man;
    man.loadFromFile("man.png");
    sf::Sprite plyer;
    plyer.setTexture(man);

    //TEXT STUFF BELOW //////////////////////////////////////////////////////////////////////////////////
    int map[25][25] = {
        1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,
        1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
        1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,1,
        1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
        1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
        1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
        1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
        1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
        1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
        1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
        1,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
        1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
        1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
        1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
        1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
        1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
        1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
        1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
        1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,

    };
   
    if (!font.loadFromFile("RetroBound.ttf")) {
        cout << "Unable to open text file" << endl;
    }

    

    enemyNametext.setFont(font);
    enemyNametext.setFillColor(sf::Color::White);
    enemyNametext.setPosition(400, 400);

    sf::Text FightBox1;
    FightBox1.setFont(font);
    FightBox1.setFillColor(sf::Color::White);
    FightBox1.setString("Fight");
    FightBox1.setScale(sf::Vector2f(2, 2));

    sf::Text FightBox2;
    FightBox2.setFont(font);
    FightBox2.setFillColor(sf::Color::White);
    FightBox2.setString("Items");
    FightBox2.setScale(sf::Vector2f(2, 2));
    
    sf::Text FightBox3;
    FightBox3.setFont(font);
    FightBox3.setFillColor(sf::Color::White);
    FightBox3.setString("Run");
    FightBox3.setScale(sf::Vector2f(2, 2));

    sf::Text GameOver;
    GameOver.setFont(font);
    GameOver.setFillColor(sf::Color::White);
    GameOver.setString("Game Over");
    GameOver.setScale(sf::Vector2f(5, 5));
    GameOver.setPosition(50, 300);

    enemyHPtext.setFont(font);
    enemyHPtext.setFillColor(sf::Color::Red);
    enemyHPtext.setPosition(300, 400);
    //text.setString("test");

    //TEXT STUFF ^^^^^^^ //////////////////////////////////////////////////////////////////////////////
    


    //SPRITES///////////////////////////////////////////////////////////////////////
    
    sf::Texture overworldtest;
    sf::Texture test;
    overworldtest.loadFromFile("Dummy.png");
    test.loadFromFile("Dummy.png");
    sf::Sprite overworldummy;
    sf::Sprite dummy;
    overworldummy.setTexture(overworldtest);
    dummy.setTexture(test);
    overworldummy.setPosition(600, 100);
    dummy.setPosition(400, 300);
    
    

    

    sf::RectangleShape menuFight(sf::Vector2f(800, 300));
    menuFight.setOutlineColor(sf::Color::White);
    menuFight.setOutlineThickness(5);
    menuFight.setFillColor(sf::Color::Black);
    menuFight.setPosition(-1000, -1000);
    
    sf::RectangleShape healthbar(sf::Vector2f(playerHP * 2, 20));
    healthbar.setOutlineColor(sf::Color::White);
    healthbar.setOutlineThickness(3);
    healthbar.setFillColor(sf::Color::Red);
    healthbar.setPosition(-1000, -1000);


    //player setup----------------------------------------------------------------------
    int playerX = 200;
    int playerY = 200;
    int playerdamage;
    int playerdefense;
    int weapondamage = 0;
    plyer.setPosition(playerX, playerY); //set position: this is where the top left corner will be
    //player velocity
    
    bool isOnGround = false; //needed to apply gravity

    int radius = 12.5;
    int playerTick = 0;
    int playerFrameNum = 0;
    sf::IntRect plyerSubRect;
    plyerSubRect.left = 0;
    plyerSubRect.top = 0;
    plyerSubRect.width = 25;
    plyerSubRect.height = 25;
    plyer.setTextureRect(plyerSubRect);

    playerdamage = weapondamage += 10;


    enemy e1("Dummy", 100, 2, 10, 5);
    enemy e2("Dummy", 100, 2, 10, 5);


    //################### HOLD ONTO YOUR BUTTS, ITS THE GAME LOOP###############################################################
    while (screen.isOpen()&& Dead == false) {//keep window open until user shuts it down or you die
        ticker += 1;


        if (ticker >= 60) {
            ticker = 0;
        }
       
        if (gamestate == "BATTLE") {
            menuFight.setPosition(0, 495);
            healthbar.setPosition(25, 695);
            FightBox1.setPosition(50, 520);
            FightBox2.setPosition(350, 520);
            FightBox3.setPosition(650, 520);
        }
        else {
            menuFight.setPosition(-1000, -1000);
            healthbar.setPosition(-1000, -1000);
            FightBox1.setPosition(-1000, -1000);
            FightBox2.setPosition(-1000, -1000);
            FightBox3.setPosition(-1000, -1000);
        }
        //std::cout << menuFight.getPosition().x << " " << menuFight.getPosition().y << std::endl;
        if (menuX == 0) {
            FightBox1.setFillColor(sf::Color::Red);
        }
        else { FightBox1.setFillColor(sf::Color::White); }

        if (menuX == 1) {
            FightBox2.setFillColor(sf::Color::Red);
        }
        else { FightBox2.setFillColor(sf::Color::White); }

        if (menuX == 2) {
            FightBox3.setFillColor(sf::Color::Red);
        }
        else { FightBox3.setFillColor(sf::Color::White); }
        //cout << "enemy health is " << e1.getHealth();
        if (e1.getHealth() > 0 && dummyfight == true && playerX>400) {
            e1.attack(playerdamage, 2);
        }
        if (e2.getHealth() > 0 && dummyfight == true&&playerX<400) {
            e2.attack(playerdamage, 2);
        }
        //old code removed by mo:
        //if (e1.attack(playerdamage, 2) != 0) {
        //    e1.attack(playerdamage, 2);
        //}
        while (screen.pollEvent(event)) { //look for events-----------------------

            //this checks if the user has clicked the little "x" button in the top right corner
            if (event.type == sf::Event::EventType::Closed)
                screen.close();

            //KEYBOARD INPUT 
            //code note: I'm not sure why this slows down when the mouse moves, 
            //or why it works better when this is in the event loop and the other input is not :/


            if (sf::Keyboard::isKeyPressed(sf::Keyboard::Left)|| sf::Keyboard::isKeyPressed(sf::Keyboard::A)) {
                keys[LEFT] = true;
            }
            else keys[LEFT] = false;
            
            if (sf::Keyboard::isKeyPressed(sf::Keyboard::Right)|| sf::Keyboard::isKeyPressed(sf::Keyboard::D)) {
                keys[RIGHT] = true;
            }
            else keys[RIGHT] = false;

            if (sf::Keyboard::isKeyPressed(sf::Keyboard::Up) || sf::Keyboard::isKeyPressed(sf::Keyboard::W)) {
                keys[UP] = true;
            }
            else keys[UP] = false;

            if (sf::Keyboard::isKeyPressed(sf::Keyboard::Down) || sf::Keyboard::isKeyPressed(sf::Keyboard::S)) {
                keys[DOWN] = true;
            }
            else keys[DOWN] = false;

            if (sf::Keyboard::isKeyPressed(sf::Keyboard::Space) || sf::Keyboard::isKeyPressed(sf::Keyboard::Space)) {
                keys[SPACE] = true;
            }
            else keys[SPACE] = false;

            int frameWidth = 32;
            int frameHeight = 32;
            int RowNum = 0;
            int frameNum = 0;
            int ticker = 0;
            if (pVelx != 0 || pVely != 0) {
                ticker += 1;
                if (ticker % 10 == 0)
                    frameNum += 1;
                if (frameNum > 2)
                    frameNum = 0;
            }

            if (keys[UP] && gamestate != "BATTLE") { //checks if "W" is pressed
                //playerY -= 5;
                pVely = -3;
            }
            else if (keys[DOWN] && gamestate != "BATTLE") { //checks if "S" is pressed
                //playerY += 5;
                pVely = 3;
            }
            else {
                pVely = 0;
            }
            if (keys[LEFT] && gamestate != "BATTLE") {
                //playerX -= 5;
                pVelx = -3;
                RowNum - 1;
            }
            else if (keys[RIGHT] && gamestate != "BATTLE") {
                //playerX += 5;
                pVelx = 3;
                RowNum - 0;
            }

            else {
                pVelx = 0;
            }

            //fight menu stuff
            if (keys[UP] && gamestate == "BATTLE" && scroll == false) { //checks if "W" is pressed
                menuY -= 1;
                scroll = true;
            }
            if (keys[DOWN] && gamestate == "BATTLE" && scroll == false) { //checks if "W" is pressed
                menuY += 1;
                scroll = true;
            }
            if (keys[LEFT] && gamestate == "BATTLE" && scroll == false) { //checks if "W" is pressed
                menuX -= 1;
                scroll = true;
            }
            if (keys[RIGHT] && gamestate == "BATTLE" && scroll == false) { //checks if "W" is pressed
                menuX += 1;
                scroll = true;
            }

            if (!keys[RIGHT] && !keys[LEFT] && !keys[DOWN] && !keys[UP]) {
                scroll = false;
            }
            if (menuX >= 3) {
                menuX = 0;
            }

            

            if (pVelx > 3) {
                pVelx = 3;
            }
            if (pVelx < -3) {
                pVelx = -3;
            }
            if (pVely > 3) {
                pVely = 3;
            }
            if (pVelx < -3) {
                pVelx = -3;
            }
        }//end event loop---------------------------------------------------------------



       //collision algorithms!
        //right
        if ((pVelx > 0 && map[(playerY) / 32][(playerX+34) / 32] >= 1) || (pVelx > 0 && map[(playerY+32) / 32][(playerX + 33) / 32] >= 1)) {
            pVelx = 0;
        }
        //left
        if ((pVelx < 0 && map[int((playerY) / 32)][(playerX-1) / 32] >= 1) || (pVelx < 0 && map[int((playerY+32) / 32)][(playerX - 1) / 32] >= 1)) {
            pVelx = 0;
        }
        //up
        if ((pVely < 0 && map[(playerY-2) / 32][(playerX) / 32] >= 1) || (pVely < 0 && map[(playerY - 2) / 32][(playerX+32) / 32] >= 1)) {
            pVely = 0;
        }
        //down
        if ((pVely > 0 && map[(playerY + 34) / 32][(playerX+1) / 32] >= 1) || (pVely > 0 && map[(playerY + 34) / 32][(playerX+32) / 32] >= 1)) {
            pVely = 0;
        }


        //dummy collision test
        if ((pVelx > 0 && map[(playerY) / 32][(playerX + 34) / 32] == -1) || (pVelx > 0 && map[(playerY + 32) / 32][(playerX + 33) / 32] == -1 && playerX > 400 && e1.getHealth() > 0)) {
            e1.attack(playerdamage, 2);
        }
        if ((pVelx > 0 && map[(playerY) / 32][(playerX + 34) / 32] == -1) || (pVelx > 0 && map[(playerY + 32) / 32][(playerX + 33) / 32] == -1 && playerX > 400 && e1.getHealth() > 0)) {
            e1.attack(playerdamage, 2);
        }
        //left
        if ((pVelx < 0 && map[int((playerY) / 32)][(playerX - 1) / 32] == -1) || (pVelx < 0 && map[int((playerY + 32) / 32)][(playerX - 1) / 32] == -1 && playerX > 400 && e1.getHealth() > 0)) {
            e1.attack(playerdamage, 2);
        }
        //up
        if ((pVely < 0 && map[(playerY - 2) / 32][(playerX) / 32] == -1) || (pVely < 0 && map[(playerY - 2) / 32][(playerX + 32) / 32] == -1 && playerX > 400 && e1.getHealth() > 0)) {
            e1.attack(playerdamage, 2);
        }
        //down
        if ((pVely > 0 && map[(playerY + 34) / 32][(playerX + 1) / 32] == -1) || (pVely > 0 && map[(playerY + 34) / 32][(playerX + 32) / 32] == -1 && playerX > 400 && e1.getHealth() > 0)) {
            e1.attack(playerdamage, 2);
        }

        if ((pVelx > 0 && map[(playerY) / 32][(playerX + 34) / 32] == -1) || (pVelx > 0 && map[(playerY + 32) / 32][(playerX + 33) / 32] == -1 && playerX < 400 && e2.getHealth() > 0)) {
            e2.attack(playerdamage, 2);
        }
        if ((pVelx > 0 && map[(playerY) / 32][(playerX + 34) / 32] == -1) || (pVelx > 0 && map[(playerY + 32) / 32][(playerX + 33) / 32] == -1 && playerX < 400 && e2.getHealth() > 0)) {
            e2.attack(playerdamage, 2);
        }
        //left
        if ((pVelx < 0 && map[int((playerY) / 32)][(playerX - 1) / 32] == -1) || (pVelx < 0 && map[int((playerY + 32) / 32)][(playerX - 1) / 32] == -1 && playerX < 400 && e2.getHealth() > 0)) {
            e2.attack(playerdamage, 2);
        }
        //up
        if ((pVely < 0 && map[(playerY - 2) / 32][(playerX) / 32] == -1) || (pVely < 0 && map[(playerY - 2) / 32][(playerX + 32) / 32] == -1 && playerX < 400 && e2.getHealth() > 0)) {
            e2.attack(playerdamage, 2);
        }
        //down
        if ((pVely > 0 && map[(playerY + 34) / 32][(playerX + 1) / 32] == -1) || (pVely > 0 && map[(playerY + 34) / 32][(playerX + 32) / 32] == -1 && playerX < 400 && e2.getHealth() > 0)) {
            e2.attack(playerdamage, 2);
        }


        //actually move the player!---------------------------------------------------------
        playerX += pVelx;
        playerY += pVely;
        plyer.setPosition(playerX, playerY);
        

        clock.restart();
        //render section-----------------------------------------
        screen.clear(); //wipes screen, without this things smear
        
        if (gamestate != "BATTLE" && playerHP >= 0) {
            for (int rows = 0; rows < 25; rows++)
                for (int cols = 0; cols < 25; cols++) {
                    if (map[rows][cols] == 0) {
                        blue.setPosition(cols * 32, rows * 32);
                        screen.draw(blue);
                    }
                    if (map[rows][cols] == -1 && e1.getHealth()>0) {
                        dummy.setPosition(cols * 32, rows * 32);
                        screen.draw(dummy);
                    }
                    else if (map[rows][cols] == -1 && e1.getHealth() <= 0) {
                        blue.setPosition(cols * 32, rows * 32);
                        screen.draw(blue);
                    }
                }
           // overworldummy.setScale(sf::Vector2f(1, 1));
            screen.draw(plyer); //you gotta drew each object
            
            //screen.draw(overworldummy);   
        }
        if (gamestate == "BATTLE" && playerHP >= 0) {
            screen.draw(menuFight);
            healthbar.setSize(sf::Vector2f(playerHP * 2,20));
            screen.draw(healthbar);
            if (namepass == "Dummy" && e1.getHealth() > 0) {
                overworldummy.setScale(sf::Vector2f(10, 10));
                overworldummy.setPosition(sf::Vector2f(800 / 2 - 180, 800 / 2 - 320));
                screen.draw(overworldummy);
                screen.draw(enemyNametext);
                screen.draw(enemyHPtext);
                screen.draw(FightBox1);
                screen.draw(FightBox2);
                screen.draw(FightBox3);
            }
        }
        if (playerHP<=0){
            screen.draw(GameOver);
        }
        screen.display(); //flips memory drawings onto screen

    }//######################## end game loop ###################################################################################

    cout << "you got frigged" << endl;
} //end game

//class function definitions AND standalone function definitions go here
enemy::enemy() {
    health=0;
    defense=0;
    damage=0;
    debuff=0;
    moves=0;
    xpos=0;
    isDead=0;
}
enemy::enemy(string type, int hpass, int position, int damagepass, int defensepass) {
    isDead = false;
    xpos = position * 200;
    health = hpass;
    defense = defensepass;
    damage = damagepass;
    debuff = 0;
    xpos = 0;
    moves = 0;
    namepass = type;
    enemyNametext.setString(type);
    sf::String wow;
    //wow.insert(11, to_string(health));
    enemyHPtext.setString(to_string(health));
}
int enemy::attack(int damagetaken, int attacknum) {
    //text.setString("smartie");
    gamestate = "BATTLE";
    //cout << "starting attack function" << endl;
    if (keys[SPACE] && turn == true && menuX == 0) { 
        //enemyHP -= damagetaken;
        health -= damagetaken;
        enemyHPtext.setString(to_string(health));
        cout << "Attacked for: " << damagetaken << endl;
        turn = false;   
    }
    if (keys[SPACE] && playerHP <= 0) {
        Dead = true;
    }
    if (keys[SPACE] && turn == true && menuX == 2) {
        pVelx = -3;
        dummyfight = false;
        gamestate = "DEFAULT";
    }

    if (health <= 0) {
        cout << "enemy defeated!" << endl;
        gamestate = "DEFAULT";

        return 0;
    }
    else {
        if (!keys[SPACE] && turn == false) {
            enemyattack = rand() % attacknum + 1;
            if (enemyattack == 1) {
                cout << namepass << " takes a swing!" << endl;
                playerHP -= damage;
                cout << playerHP;
                turn = true;
            }
            else if (enemyattack == 2) {
                cout << namepass << " takes a big shot!" << endl;
                playerHP -= damage + (damage/5) ;
                cout << playerHP;
                turn = true;
            }
            else if (enemyattack == 3) {
                cout << namepass << " casts a spell!" << endl;
                turn = true;
            }
            else {
                cout << namepass << " creates ultimate destruction!" << endl;
                turn = true;
            }
        }
    }
}
